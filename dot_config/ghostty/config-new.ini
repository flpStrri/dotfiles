term = xterm-ghostty
# 
# You can generate the list of valid values using the CLI:
# 
#     ghostty +list-fonts
# 
# This configuration can be repeated multiple times to specify preferred
# fallback fonts when the requested codepoint is not available in the primary
# font. This is particularly useful for multiple languages, symbolic fonts,
# etc.
# 
# Notes on emoji specifically: On macOS, Ghostty by default will always use
# Apple Color Emoji and on Linux will always use Noto Emoji. You can
# override this behavior by specifying a font family here that contains
# emoji glyphs.
# 
# The specific styles (bold, italic, bold italic) do not need to be
# explicitly set. If a style is not set, then the regular style (font-family)
# will be searched for stylistic variants. If a stylistic variant is not
# found, Ghostty will use the regular style. This prevents falling back to a
# different font family just to get a style such as bold. This also applies
# if you explicitly specify a font family for a style. For example, if you
# set `font-family-bold = FooBar` and "FooBar" cannot be found, Ghostty will
# use whatever font is set for `font-family` for the bold style.
# 
# Finally, some styles may be synthesized if they are not supported.
# For example, if a font does not have an italic style and no alternative
# italic font is specified, Ghostty will synthesize an italic style by
# applying a slant to the regular style. If you want to disable these
# synthesized styles then you can use the `font-style` configurations
# as documented below.
# 
# You can disable styles completely by using the `font-style` set of
# configurations. See the documentation for `font-style` for more information.
# 
# If you want to overwrite a previous set value rather than append a fallback,
# specify the value as `""` (empty string) to reset the list and then set the
# new values. For example:
# 
#     font-family = ""
#     font-family = "My Favorite Font"
# 
# Setting any of these as CLI arguments will automatically clear the
# values set in configuration files so you don't need to specify
# `--font-family=""` before setting a new value. You only need to specify
# this within config files if you want to clear previously set values in
# configuration files or on the CLI if you want to clear values set on the
# CLI.
# 
# Changing this configuration at runtime will only affect new terminals, i.e.
# new windows, tabs, etc.
font-family = 

font-family-bold = 
font-family-italic = 
font-family-bold-italic = 
# The named font style to use for each of the requested terminal font styles.
# This looks up the style based on the font style string advertised by the
# font itself. For example, "Iosevka Heavy" has a style of "Heavy".
# 
# You can also use these fields to completely disable a font style. If you set
# the value of the configuration below to literal `false` then that font style
# will be disabled. If the running program in the terminal requests a disabled
# font style, the regular font style will be used instead.
# 
# These are only valid if its corresponding font-family is also specified. If
# no font-family is specified, then the font-style is ignored unless you're
# disabling the font style.
font-style = default
font-style-bold = default
font-style-italic = default
font-style-bold-italic = default
font-size = 13
font-thicken = true

theme = catppuccin-mocha
selection-invert-fg-bg = false
cursor-invert-fg-bg = false
cursor-opacity = 1
cursor-style = block
cursor-style-blink = 


# Enables the ability to move the cursor at prompts by using `alt+click` on
# Linux and `option+click` on macOS.
cursor-click-to-move = true

background-opacity = 1
background-blur-radius = 0
unfocused-split-opacity = 0.7

# The command to run, usually a shell. If this is not an absolute path, it'll
# be looked up in the `PATH`. If this is not set, a default will be looked up
# from your system. The rules for the default lookup are:
# 
#   * `SHELL` environment variable
# 
#   * `passwd` entry (user information)
# 
# This can contain additional arguments to run the command with. If additional
# arguments are provided, the command will be executed using `/bin/sh -c`.
# Ghostty does not do any shell command parsing.
# 
# This command will be used for all new terminal surfaces, i.e. new windows,
# tabs, etc. If you want to run a command only for the first terminal surface
# created when Ghostty starts, use the `initial-command` configuration.
# 
# Ghostty supports the common `-e` flag for executing a command with
# arguments. For example, `ghostty -e fish --with --custom --args`.
# This flag sets the `initial-command` configuration, see that for more
# information.
command = 

# This is the same as "command", but only applies to the first terminal
# surface created when Ghostty starts. Subsequent terminal surfaces will use
# the `command` configuration.
# 
# After the first terminal surface is created (or closed), there is no
# way to run this initial command again automatically. As such, setting
# this at runtime works but will only affect the next terminal surface
# if it is the first one ever created.
# 
# If you're using the `ghostty` CLI there is also a shortcut to set this
# with arguments directly: you can use the `-e` flag. For example: `ghostty -e
# fish --with --custom --args`. The `-e` flag automatically forces some
# other behaviors as well:
# 
#   * `gtk-single-instance=false` - This ensures that a new instance is
#     launched and the CLI args are respected.
# 
#   * `quit-after-last-window-closed=true` - This ensures that the Ghostty
#     process will exit when the command exits. Additionally, the
#     `quit-after-last-window-closed-delay` is unset.
# 
#   * `shell-integration=detect` (if not `none`) - This prevents forcibly
#     injecting any configured shell integration into the command's
#     environment. With `-e` its highly unlikely that you're executing a
#     shell and forced shell integration is likely to cause problems
#     (i.e. by wrapping your command in a shell, setting env vars, etc.).
#     This is a safety measure to prevent unexpected behavior. If you want
#     shell integration with a `-e`-executed command, you must either
#     name your binary appopriately or source the shell integration script
#     manually.
# 
initial-command = 

# If true, keep the terminal open after the command exits. Normally, the
# terminal window closes when the running command (such as a shell) exits.
# With this true, the terminal window will stay open until any keypress is
# received.
# 
# This is primarily useful for scripts or debugging.
wait-after-command = false

scrollback-limit = 10000000

link-url = true

fullscreen = false

# The title Ghostty will use for the window. This will force the title of the
# window to be this title at all times and Ghostty will ignore any set title
# escape sequences programs (such as Neovim) may send.
# 
# If you want a blank title, set this to one or more spaces by quoting
# the value. For example, `title = " "`. This effectively hides the title.
# This is necessary because setting a blank value resets the title to the
# default value of the running program.
# 
# This configuration can be reloaded at runtime. If it is set, the title
# will update for all windows. If it is unset, the next title change escape
# sequence will be honored but previous changes will not retroactively
# be set. This latter case may require you restart programs such as neovim
# to get the new title.
title = 


# The directory to change to after starting the command.
# 
# This setting is secondary to the `window-inherit-working-directory`
# setting. If a previous Ghostty terminal exists in the same process,
# `window-inherit-working-directory` will take precedence. Otherwise, this
# setting will be used. Typically, this setting is used only for the first
# window.
# 
# The default is `inherit` except in special scenarios listed next. On macOS,
# if Ghostty can detect it is launched from launchd (double-clicked) or
# `open`, then it defaults to `home`. On Linux with GTK, if Ghostty can detect
# it was launched from a desktop launcher, then it defaults to `home`.
# 
# The value of this must be an absolute value or one of the special values
# below:
# 
#   * `home` - The home directory of the executing user.
# 
#   * `inherit` - The working directory of the launching process.
working-directory = 

# Key bindings. The format is `trigger=action`. Duplicate triggers will
# overwrite previously set values. The list of actions is available in
# the documentation or using the `ghostty +list-actions` command.
# 
# Trigger: `+`-separated list of keys and modifiers. Example: `ctrl+a`,
# `ctrl+shift+b`, `up`. Some notes:
# 
#   * modifiers cannot repeat, `ctrl+ctrl+a` is invalid.
# 
#   * modifiers and keys can be in any order, `shift+a+ctrl` is *weird*,
#     but valid.
# 
#   * only a single key input is allowed, `ctrl+a+b` is invalid.
# 
#   * the key input can be prefixed with `physical:` to specify a
#     physical key mapping rather than a logical one. A physical key
#     mapping responds to the hardware keycode and not the keycode
#     translated by any system keyboard layouts. Example: "ctrl+physical:a"
# 
# Valid modifiers are `shift`, `ctrl` (alias: `control`), `alt` (alias: `opt`,
# `option`), and `super` (alias: `cmd`, `command`). You may use the modifier
# or the alias. When debugging keybinds, the non-aliased modifier will always
# be used in output.
# 
# Note: The fn or "globe" key on keyboards are not supported as a
# modifier. This is a limitation of the operating systems and GUI toolkits
# that Ghostty uses.
# 
# You may also specify multiple triggers separated by `>` to require a
# sequence of triggers to activate the action. For example,
# `ctrl+a>n=new_window` will only trigger the `new_window` action if the
# user presses `ctrl+a` followed separately by `n`. In other software, this
# is sometimes called a leader key, a key chord, a key table, etc. There
# is no hardcoded limit on the number of parts in a sequence.
# 
# Warning: If you define a sequence as a CLI argument to `ghostty`,
# you probably have to quote the keybind since `>` is a special character
# in most shells. Example: ghostty --keybind='ctrl+a>n=new_window'
# 
# A trigger sequence has some special handling:
# 
#   * Ghostty will wait an indefinite amount of time for the next key in
#     the sequence. There is no way to specify a timeout. The only way to
#     force the output of a prefix key is to assign another keybind to
#     specifically output that key (i.e. `ctrl+a>ctrl+a=text:foo`) or
#     press an unbound key which will send both keys to the program.
# 
#   * If a prefix in a sequence is previously bound, the sequence will
#     override the previous binding. For example, if `ctrl+a` is bound to
#     `new_window` and `ctrl+a>n` is bound to `new_tab`, pressing `ctrl+a`
#     will do nothing.
# 
#   * Adding to the above, if a previously bound sequence prefix is
#     used in a new, non-sequence binding, the entire previously bound
#     sequence will be unbound. For example, if you bind `ctrl+a>n` and
#     `ctrl+a>t`, and then bind `ctrl+a` directly, both `ctrl+a>n` and
#     `ctrl+a>t` will become unbound.
# 
#   * Trigger sequences are not allowed for `global:` or `all:`-prefixed
#     triggers. This is a limitation we could remove in the future.
# 
# Action is the action to take when the trigger is satisfied. It takes the
# format `action` or `action:param`. The latter form is only valid if the
# action requires a parameter.
# 
#   * `ignore` - Do nothing, ignore the key input. This can be used to
#     black hole certain inputs to have no effect.
# 
#   * `unbind` - Remove the binding. This makes it so the previous action
#     is removed, and the key will be sent through to the child command
#     if it is printable.
# 
#   * `csi:text` - Send a CSI sequence. i.e. `csi:A` sends "cursor up".
# 
#   * `esc:text` - Send an escape sequence. i.e. `esc:d` deletes to the
#     end of the word to the right.
# 
#   * `text:text` - Send a string. Uses Zig string literal syntax.
#     i.e. `text:\x15` sends Ctrl-U.
# 
#   * All other actions can be found in the documentation or by using the
#     `ghostty +list-actions` command.
# 
# Some notes for the action:
# 
#   * The parameter is taken as-is after the `:`. Double quotes or
#     other mechanisms are included and NOT parsed. If you want to
#     send a string value that includes spaces, wrap the entire
#     trigger/action in double quotes. Example: `--keybind="up=csi:A B"`
# 
# There are some additional special values that can be specified for
# keybind:
# 
#   * `keybind=clear` will clear all set keybindings. Warning: this
#     removes ALL keybindings up to this point, including the default
#     keybindings.
# 
# The keybind trigger can be prefixed with some special values to change
# the behavior of the keybind. These are:
# 
#   * `all:` - Make the keybind apply to all terminal surfaces. By default,
#     keybinds only apply to the focused terminal surface. If this is true,
#     then the keybind will be sent to all terminal surfaces. This only
#     applies to actions that are surface-specific. For actions that
#     are already global (i.e. `quit`), this prefix has no effect.
# 
#   * `global:` - Make the keybind global. By default, keybinds only work
#     within Ghostty and under the right conditions (application focused,
#     sometimes terminal focused, etc.). If you want a keybind to work
#     globally across your system (i.e. even when Ghostty is not focused),
#     specify this prefix. This prefix implies `all:`. Note: this does not
#     work in all environments; see the additional notes below for more
#     information.
# 
#   * `unconsumed:` - Do not consume the input. By default, a keybind
#     will consume the input, meaning that the associated encoding (if
#     any) will not be sent to the running program in the terminal. If
#     you wish to send the encoded value to the program, specify the
#     `unconsumed:` prefix before the entire keybind. For example:
#     `unconsumed:ctrl+a=reload_config`. `global:` and `all:`-prefixed
#     keybinds will always consume the input regardless of this setting.
#     Since they are not associated with a specific terminal surface,
#     they're never encoded.
# 
# Keybind triggers are not unique per prefix combination. For example,
# `ctrl+a` and `global:ctrl+a` are not two separate keybinds. The keybind
# set later will overwrite the keybind set earlier. In this case, the
# `global:` keybind will be used.
# 
# Multiple prefixes can be specified. For example,
# `global:unconsumed:ctrl+a=reload_config` will make the keybind global
# and not consume the input to reload the config.
# 
# Note: `global:` is only supported on macOS. On macOS,
# this feature requires accessibility permissions to be granted to Ghostty.
# When a `global:` keybind is specified and Ghostty is launched or reloaded,
# Ghostty will attempt to request these permissions. If the permissions are
# not granted, the keybind will not work. On macOS, you can find these
# permissions in System Preferences -> Privacy & Security -> Accessibility.
keybind = super+page_up=scroll_page_up
keybind = super+shift+down=jump_to_prompt:1
keybind = super+alt+i=inspector:toggle
keybind = super+w=close_surface
keybind = super+shift+w=close_window
keybind = shift+up=adjust_selection:up
keybind = super+down=jump_to_prompt:1
keybind = super+enter=toggle_fullscreen
keybind = super+c=copy_to_clipboard
keybind = shift+left=adjust_selection:left
keybind = super+equal=increase_font_size:1
keybind = shift+page_up=adjust_selection:page_up
keybind = super+right=text:\x05
keybind = shift+end=adjust_selection:end
keybind = super+plus=increase_font_size:1
keybind = super+q=quit
keybind = super+home=scroll_to_top
keybind = alt+left=esc:b
keybind = super+left=text:\x01
keybind = super+shift+up=jump_to_prompt:-1
keybind = shift+right=adjust_selection:right
keybind = super+comma=open_config
keybind = super+shift+comma=reload_config
keybind = super+minus=decrease_font_size:1
keybind = shift+page_down=adjust_selection:page_down
keybind = super+a=select_all
keybind = alt+right=esc:f
keybind = super+ctrl+f=toggle_fullscreen
keybind = super+alt+shift+j=write_scrollback_file:open
keybind = shift+down=adjust_selection:down
keybind = super+n=new_window
keybind = super+page_down=scroll_page_down
keybind = super+alt+shift+w=close_all_windows
keybind = super+end=scroll_to_bottom
keybind = super+shift+j=write_scrollback_file:paste
keybind = super+zero=reset_font_size
keybind = super+t=new_tab
keybind = ctrl+tab=next_tab
keybind = ctrl+shift+tab=previous_tab
keybind = super+shift+left_bracket=unbind
keybind = super+shift+right_bracket=unbind
keybind = super+physical:one=goto_tab:1
keybind = super+physical:two=goto_tab:2
keybind = super+physical:three=goto_tab:3
keybind = super+physical:four=goto_tab:4
keybind = super+physical:five=goto_tab:5
keybind = super+physical:six=goto_tab:6
keybind = super+physical:seven=goto_tab:7
keybind = super+physical:eight=goto_tab:8
keybind = super+physical:nine=goto_tab:9
keybind = super+physical:zero=last_tab
keybind = ctrl+t>enter=toggle_split_zoom
keybind = ctrl+t>h=goto_split:left
keybind = ctrl+t>n=goto_split:bottom
keybind = ctrl+t>e=goto_split:top
keybind = ctrl+t>i=goto_split:right
keybind = ctrl+t>t>n=new_split:down
keybind = ctrl+t>t>i=new_split:right
keybind = ctrl+t>d>h=resize_split:left,100
keybind = ctrl+t>d>n=resize_split:down,100
keybind = ctrl+t>d>e=resize_split:up,100
keybind = ctrl+t>d>i=resize_split:right,100
keybind = ctrl+t>t>enter=equalize_splits
keybind = super+left_bracket=unbind
keybind = super+right_bracket=unbind
keybind = shift+home=adjust_selection:home
keybind = super+up=jump_to_prompt:-1
keybind = super+k=clear_screen
keybind = super+v=paste_from_clipboard

window-padding-x = 11
window-padding-y = 11
window-padding-balance = true
window-padding-color = background

# If true, new windows and tabs will inherit the working directory of the
# previously focused window. If no window was previously focused, the default
# working directory will be used (the `working-directory` option).
window-inherit-working-directory = false

# Valid values:
# 
#   * `true`
#   * `false` - windows won't have native decorations, i.e. titlebar and
#      borders. On macOS this also disables tabs and tab overview.
# 
# The "toggle_window_decorations" keybind action can be used to create
# a keybinding to toggle this setting at runtime.
# 
# Changing this configuration in your configuration and reloading will
# only affect new windows. Existing windows will not be affected.
# 
# macOS: To hide the titlebar without removing the native window borders
#        or rounded corners, use `macos-titlebar-style = hidden` instead.
window-decoration = true

# The font that will be used for the application's window and tab titles.
# 
# This is currently only supported on macOS.
window-title-font-family = 

# The theme to use for the windows. Valid values:
# 
#   * `auto` - Determine the theme based on the configured terminal
#      background color. This has no effect if the "theme" configuration
#      has separate light and dark themes. In that case, the behavior
#      of "auto" is equivalent to "system".
#   * `system` - Use the system theme.
#   * `light` - Use the light theme regardless of system theme.
#   * `dark` - Use the dark theme regardless of system theme.
#   * `ghostty` - Use the background and foreground colors specified in the
#     Ghostty configuration. This is only supported on Linux builds with
#     Adwaita and `gtk-adwaita` enabled.
# 
# On macOS, if `macos-titlebar-style` is "tabs", the window theme will be
# automatically set based on the luminosity of the terminal background color.
# This only applies to terminal windows. This setting will still apply to
# non-terminal windows within Ghostty.
# 
# This is currently only supported on macOS and Linux.
window-theme = auto


# The initial window size. This size is in terminal grid cells by default.
# Both values must be set to take effect. If only one value is set, it is
# ignored.
# 
# We don't currently support specifying a size in pixels but a future change
# can enable that. If this isn't specified, the app runtime will determine
# some default size.
# 
# Note that the window manager may put limits on the size or override the
# size. For example, a tiling window manager may force the window to be a
# certain size to fit within the grid. There is nothing Ghostty will do about
# this, but it will make an effort.
# 
# Sizes larger than the screen size will be clamped to the screen size.
# This can be used to create a maximized-by-default window size.
# 
# This will not affect new tabs, splits, or other nested terminal elements.
# This only affects the initial window size of any new window. Changing this
# value will not affect the size of the window after it has been created. This
# is only used for the initial size.
# 
# BUG: On Linux with GTK, the calculated window size will not properly take
# into account window decorations. As a result, the grid dimensions will not
# exactly match this configuration. If window decorations are disabled (see
# window-decorations), then this will work as expected.
# 
# Windows smaller than 10 wide by 4 high are not allowed.
window-height = 0

window-width = 0
# Whether to enable saving and restoring window state. Window state includes
# their position, size, tabs, splits, etc. Some window state requires shell
# integration, such as preserving working directories. See `shell-integration`
# for more information.
# 
# There are three valid values for this configuration:
# 
#   * `default` will use the default system behavior. On macOS, this
#     will only save state if the application is forcibly terminated
#     or if it is configured systemwide via Settings.app.
# 
#   * `never` will never save window state.
# 
#   * `always` will always save window state whenever Ghostty is exited.
# 
# If you change this value to `never` while Ghostty is not running, the next
# Ghostty launch will NOT restore the window state.
# 
# If you change this value to `default` while Ghostty is not running and the
# previous exit saved state, the next Ghostty launch will still restore the
# window state. This is because Ghostty cannot know if the previous exit was
# due to a forced save or not (macOS doesn't provide this information).
# 
# If you change this value so that window state is saved while Ghostty is not
# running, the previous window state will not be restored because Ghostty only
# saves state on exit if this is enabled.
# 
# The default value is `default`.
# 
# This is currently only supported on macOS. This has no effect on Linux.
window-save-state = default

# Resize the window in discrete increments of the focused surface's cell size.
# If this is disabled, surfaces are resized in pixel increments. Currently
# only supported on macOS.
window-step-resize = false

# The position where new tabs are created. Valid values:
# 
#   * `current` - Insert the new tab after the currently focused tab,
#     or at the end if there are no focused tabs.
# 
#   * `end` - Insert the new tab at the end of the tab list.
window-new-tab-position = current

# This controls when resize overlays are shown. Resize overlays are a
# transient popup that shows the size of the terminal while the surfaces are
# being resized. The possible options are:
# 
#   * `always` - Always show resize overlays.
#   * `never` - Never show resize overlays.
#   * `after-first` - The resize overlay will not appear when the surface
#                     is first created, but will show up if the surface is
#                     subsequently resized.
# 
# The default is `after-first`.
resize-overlay = after-first

# If resize overlays are enabled, this controls the position of the overlay.
# The possible options are:
# 
#   * `center`
#   * `top-left`
#   * `top-center`
#   * `top-right`
#   * `bottom-left`
#   * `bottom-center`
#   * `bottom-right`
# 
# The default is `center`.
resize-overlay-position = center

# If resize overlays are enabled, this controls how long the overlay is
# visible on the screen before it is hidden. The default is ¾ of a second or
# 750 ms.
# 
# The duration is specified as a series of numbers followed by time units.
# Whitespace is allowed between numbers and units. Each number and unit will
# be added together to form the total duration.
# 
# The allowed time units are as follows:
# 
#   * `y` - 365 SI days, or 8760 hours, or 31536000 seconds. No adjustments
#     are made for leap years or leap seconds.
#   * `d` - one SI day, or 86400 seconds.
#   * `h` - one hour, or 3600 seconds.
#   * `m` - one minute, or 60 seconds.
#   * `s` - one second.
#   * `ms` - one millisecond, or 0.001 second.
#   * `us` or `µs` - one microsecond, or 0.000001 second.
#   * `ns` - one nanosecond, or 0.000000001 second.
# 
# Examples:
#   * `1h30m`
#   * `45s`
# 
# Units can be repeated and will be added together. This means that
# `1h1h` is equivalent to `2h`. This is confusing and should be avoided.
# A future update may disallow this.
# 
# The maximum value is `584y 49w 23h 34m 33s 709ms 551µs 615ns`. Any
# value larger than this will be clamped to the maximum value.
resize-overlay-duration = 750ms

clipboard-read = ask
clipboard-write = allow
clipboard-trim-trailing-spaces = true
clipboard-paste-protection = true
clipboard-paste-bracketed-safe = true

# Whether to automatically copy selected text to the clipboard. `true`
# will prefer to copy to the selection clipboard if supported by the
# OS, otherwise it will copy to the system clipboard.
# 
# The value `clipboard` will always copy text to the selection clipboard
# (for supported systems) as well as the system clipboard. This is sometimes
# a preferred behavior on Linux.
# 
# Middle-click paste will always use the selection clipboard on Linux
# and the system clipboard on macOS. Middle-click paste is always enabled
# even if this is `false`.
# 
# The default value is true on Linux and false on macOS. macOS copy on
# select behavior is not typical for applications so it is disabled by
# default. On Linux, this is a standard behavior so it is enabled by
# default.
copy-on-select = false

# The time in milliseconds between clicks to consider a click a repeat
# (double, triple, etc.) or an entirely new single click. A value of zero will
# use a platform-specific default. The default on macOS is determined by the
# OS settings. On every other platform it is 500ms.
click-repeat-interval = 0

# Confirms that a surface should be closed before closing it. This defaults to
# true. If set to false, surfaces will close without any confirmation.
confirm-close-surface = true

quit-after-last-window-closed = true

# Controls how long Ghostty will stay running after the last open surface has
# been closed. This only has an effect if `quit-after-last-window-closed` is
# also set to `true`.
# 
# The minimum value for this configuration is `1s`. Any values lower than
# this will be clamped to `1s`.
# 
# The duration is specified as a series of numbers followed by time units.
# Whitespace is allowed between numbers and units. Each number and unit will
# be added together to form the total duration.
# 
# The allowed time units are as follows:
# 
#   * `y` - 365 SI days, or 8760 hours, or 31536000 seconds. No adjustments
#     are made for leap years or leap seconds.
#   * `d` - one SI day, or 86400 seconds.
#   * `h` - one hour, or 3600 seconds.
#   * `m` - one minute, or 60 seconds.
#   * `s` - one second.
#   * `ms` - one millisecond, or 0.001 second.
#   * `us` or `µs` - one microsecond, or 0.000001 second.
#   * `ns` - one nanosecond, or 0.000000001 second.
# 
# Examples:
#   * `1h30m`
#   * `45s`
# 
# Units can be repeated and will be added together. This means that
# `1h1h` is equivalent to `2h`. This is confusing and should be avoided.
# A future update may disallow this.
# 
# The maximum value is `584y 49w 23h 34m 33s 709ms 551µs 615ns`. Any
# value larger than this will be clamped to the maximum value.
# 
# By default `quit-after-last-window-closed-delay` is unset and
# Ghostty will quit immediately after the last window is closed if
# `quit-after-last-window-closed` is `true`.
# 
# Only implemented on Linux.
quit-after-last-window-closed-delay = 
initial-window = true

# Allowable values are:
# 
#   * `none` - Do not do any automatic injection. You can still manually
#     configure your shell to enable the integration.
# 
#   * `detect` - Detect the shell based on the filename.
# 
#   * `bash`, `elvish`, `fish`, `zsh` - Use this specific shell injection scheme.
# 
# The default value is `detect`.
shell-integration = detect

# Shell integration features to enable if shell integration itself is enabled.
# The format of this is a list of features to enable separated by commas. If
# you prefix a feature with `no-` then it is disabled. If you omit a feature,
# its default value is used, so you must explicitly disable features you don't
# want. You can also use `true` or `false` to turn all features on or off.
# 
# Available features:
# 
#   * `cursor` - Set the cursor to a blinking bar at the prompt.
# 
#   * `sudo` - Set sudo wrapper to preserve terminfo.
# 
#   * `title` - Set the window title via shell integration.
# 
# Example: `cursor`, `no-cursor`, `sudo`, `no-sudo`, `title`, `no-title`
shell-integration-features = cursor,no-sudo,title

# The style of the macOS titlebar. Available values are: "native",
# "transparent", "tabs", and "hidden".
# 
# The "native" style uses the native macOS titlebar with zero customization.
# The titlebar will match your window theme (see `window-theme`).
# 
# The "transparent" style is the same as "native" but the titlebar will
# be transparent and allow your window background color to come through.
# This makes a more seamless window appearance but looks a little less
# typical for a macOS application and may not work well with all themes.
# 
# The "transparent" style will also update in real-time to dynamic
# changes to the window background color, i.e. via OSC 11. To make this
# more aesthetically pleasing, this only happens if the terminal is
# a window, tab, or split that borders the top of the window. This
# avoids a disjointed appearance where the titlebar color changes
# but all the topmost terminals don't match.
# 
# The "tabs" style is a completely custom titlebar that integrates the
# tab bar into the titlebar. This titlebar always matches the background
# color of the terminal. There are some limitations to this style:
# On macOS 13 and below, saved window state will not restore tabs correctly.
# macOS 14 does not have this issue and any other macOS version has not
# been tested.
# 
# The "hidden" style hides the titlebar. Unlike `window-decoration = false`,
# however, it does not remove the frame from the window or cause it to have
# squared corners. Changing to or from this option at run-time may affect
# existing windows in buggy ways. The top titlebar area of the window will
# continue to drag the window around and you will not be able to use
# the mouse for terminal events in this space.
# 
# The default value is "transparent". This is an opinionated choice
# but its one I think is the most aesthetically pleasing and works in
# most cases.
# 
# Changing this option at runtime only applies to new windows.
macos-titlebar-style = transparent
macos-titlebar-proxy-icon = hidden
macos-option-as-alt = true
macos-window-shadow = true
macos-auto-secure-input = true
macos-secure-input-indication = true
macos-icon = official

# The material to use for the frame of the macOS app icon.
# 
# Valid values:
# 
#  * `aluminum` - A brushed aluminum frame. This is the default.
#  * `beige` - A classic 90's computer beige frame.
#  * `plastic` - A glossy, dark plastic frame.
#  * `chrome` - A shiny chrome frame.
# 
# This only has an effect when `macos-icon` is set to `custom-style`.
macos-icon-frame = aluminum
macos-icon-ghost-color = 
macos-icon-screen-color = 


auto-update = off
